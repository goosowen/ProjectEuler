#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Project Euler Problem 288
=======================

For any prime p the number N(p,q) is defined byN(p,q) = âˆ‘[n=0 to q]
T[n]*p^n with T[n] generated by the following random number generator:

S[0] = 290797
S[n+1] = S[n]^2 mod 50515093
T[n] = S[n] mod p

Let Nfac(p,q) be the factorial of N(p,q).
Let NF(p,q) be the number of factors p in Nfac(p,q).

You are given that NF(3,10000) mod 3^20=624955285.

Find NF(61,10^7) mod 61^10.

"""


def main():
    return "unimplemented"


if __name__ == "__main__":
    import ntpath
    import time
    from common.shared_functions import verify_solution

    problem_number = int(ntpath.basename(__file__).replace("euler", "").replace(".py", ""))
    print("Retrieving my answer to Euler Problem {0} ...".format(problem_number))

    ts = time.time()
    my_answer = main()
    te = time.time()

    print("My answer: {1}".format(problem_number, my_answer))

    verification_type = verify_solution(problem_number, my_answer)
    print("Verification: {0}".format(verification_type.name))
    print("Took {0} seconds.".format(te - ts))
