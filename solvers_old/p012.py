#!/usr/bin/env python
# -*- coding: utf-8 -*- 
'''
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''

import math
# pure brute force method

DIVISORS = 500

def find_num(limit):
	tot = 0
	
	for i in xrange(1,limit):
		tot += i

		num_divisors = 1
		for d in xrange(int(math.sqrt(tot)),1,-1):	
			if tot % d == 0:
				num_divisors += 1

		if num_divisors*2 >= DIVISORS:
			print tot, num_divisors * 2
			return tot

		# mem[tot] = divisor_list
		


	return "limit not big enough"


print find_num(50000)


